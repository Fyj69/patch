diff --git a/drivers/android/binder.c b/drivers/android/binder.c
index cd410e5..11ab305 100644
--- a/drivers/android/binder.c
+++ b/drivers/android/binder.c
@@ -80,6 +80,9 @@
 #endif
 
 #include <uapi/linux/android/binder.h>
+#ifdef CONFIG_REKERNEL
+#include <../rekernel/rekernel.h>
+#endif /* CONFIG_REKERNEL */
 #include "binder_alloc.h"
 #include "binder_trace.h"
 /* curtis, 20180111, opchain*/
@@ -3163,7 +3166,11 @@ static void binder_transaction(struct binder_proc *proc,
 			goto err_invalid_target_handle;
 		}
 		binder_inner_proc_lock(proc);
+#ifdef CONFIG_REKERNEL
+		if (!(tr->flags & TF_ONE_WAY) && thread->transaction_stack && tr->to_proc) {
+#else
 		if (!(tr->flags & TF_ONE_WAY) && thread->transaction_stack) {
+#endif /* CONFIG_REKERNEL */
 			struct binder_transaction *tmp;
 
 			tmp = thread->transaction_stack;
@@ -3286,6 +3293,9 @@ static void binder_transaction(struct binder_proc *proc,
 	}
 
 	trace_binder_transaction(reply, t, target_node);
+#ifdef CONFIG_REKERNEL
+rekernel_binder_transaction(reply, t, target_node, tr);
+#endif /* CONFIG_REKERNEL */
 
 	t->buffer = binder_alloc_new_buf(&target_proc->alloc, tr->data_size,
 		tr->offsets_size, extra_buffers_size,
@@ -6351,6 +6361,38 @@ err_alloc_device_names_failed:
 
 device_initcall(binder_init);
 
+#ifdef CONFIG_REKERNEL
+void rekernel_binder_transaction(bool reply, struct binder_transaction *t,
+                              struct binder_node *target_node,
+                              struct binder_transaction_data *tr) {
+  struct binder_proc *to_proc;
+  struct binder_alloc *target_alloc;
+  if (!t->to_proc)
+    return;
+  to_proc = t->to_proc;
+ 
+  if (reply) {
+    binder_reply_handler(task_tgid_nr(current), current, 
+                        to_proc->pid, to_proc->tsk, false, tr);
+  } else if (t->from) {
+    if (t->from->proc) {
+      binder_trans_handler(t->from->proc->pid, t->from->proc->tsk,
+                         to_proc->pid, to_proc->tsk, false, tr);
+    }
+  } else { // oneway=1
+    binder_trans_handler(task_tgid_nr(current), current,
+                        to_proc->pid, to_proc->tsk, true, tr);
+
+    target_alloc = &to_proc->alloc;
+    if (target_alloc->free_async_space < 
+        (target_alloc->buffer_size / 10 + 0x300)) {
+      binder_overflow_handler(task_tgid_nr(current), current,
+                            to_proc->pid, to_proc->tsk, true, tr);
+    }
+  }
+}
+#endif /* CONFIG_REKERNEL */
+
 #define CREATE_TRACE_POINTS
 #include "binder_trace.h"
